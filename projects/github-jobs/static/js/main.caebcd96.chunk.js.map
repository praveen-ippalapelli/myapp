{"version":3,"sources":["view-jobs.js","header.js","App.js","serviceWorker.js","index.js"],"names":["JobsList","job","className","title","company","location","href","company_url","target","rel","Header","App","useState","jobs","setJobs","getjobs","input_value","a","api_url","console","log","fetch","response","json","api_data","onSubmit","e","preventDefault","search_value","document","querySelector","value","id","type","length","map","key","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAceA,EAZE,SAAC,GAAW,IAAVC,EAAS,EAATA,IACf,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,aAAaD,EAAIE,OAChC,yBAAKD,UAAU,WAAWD,EAAIG,SAC9B,yBAAKF,UAAU,YAAYD,EAAII,UAC/B,uBAAGC,KAAML,EAAIM,YAAaC,OAAO,SAASC,IAAI,sBAAsBP,UAAU,oBAA9E,aACA,+BCUGQ,EAjBA,WACX,OACI,6BACI,yBAAKR,UAAU,aACf,yBAAKA,UAAU,aACX,uBAAGI,KAAK,KAAR,iBAEJ,wBAAIJ,UAAU,YACV,4BAAI,uBAAGI,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,c,MC4CLK,MAnDf,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,KAQPC,EAAO,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACRC,EADQ,UAJM,sCAIN,YAHG,yCAGH,wBACgDF,EADhD,qBAFM,OAIpBG,QAAQC,IAAI,oBAFE,SAGSC,MAAMH,GAHf,cAGRI,EAHQ,gBAISA,EAASC,OAJlB,OAIRC,EAJQ,OAKdL,QAAQC,IAAII,GACZL,QAAQC,IAAI,kBACZN,EAAQU,GAPM,4CAAH,sDAiBb,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACf,0BAAMuB,SAXY,SAAAC,GACpBA,EAAEC,iBACF,IAAIC,EAAeC,SAASC,cAAc,iBAAiBC,MAC3DZ,QAAQC,IAAIQ,GACZb,EAAQa,KAQJ,2BAAOI,GAAG,eAAeC,KAAK,SAC9B,4BAAQA,KAAK,UAAb,YAGF,yBAAK/B,UAAU,aACb,yBAAKA,UAAU,cACf,kDAAwBW,EAAKqB,SAE/B,yBAAKhC,UAAU,iBAEbW,EAAKsB,KAAI,SAAAlC,GAAG,OACZ,yBAAKmC,IAAKnC,EAAI+B,GAAI9B,UAAU,qBAC1B,kBAAC,EAAD,CAAUD,IAAKA,YCnCLoC,QACW,cAA7BC,OAAOjC,SAASkC,UAEe,UAA7BD,OAAOjC,SAASkC,UAEhBD,OAAOjC,SAASkC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFd,SAASe,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.caebcd96.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst JobsList = ({job}) => {\r\n    return(\r\n        <div className=\"job-info\">\r\n            <div className=\"job-title\">{job.title}</div>\r\n            <div className=\"company\">{job.company}</div>\r\n            <div className=\"location\">{job.location}</div>\r\n            <a href={job.company_url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"apply bg-primary\">apply now</a>\r\n            <br />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JobsList;","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return(\r\n        <nav>\r\n            <div className=\"container\">\r\n            <div className=\"nav-brand\">\r\n                <a href=\"/\">Find&nbsp;Jobs</a>\r\n            </div>\r\n            <ul className=\"nav-menu\">\r\n                <li><a href=\"/\">Home</a></li>\r\n                <li><a href=\"/\">Home2</a></li>\r\n                <li><a href=\"/\">Home3</a></li>\r\n            </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, {useState} from 'react';\nimport JobsList from \"./view-jobs\";\nimport Header from \"./header\";\nimport './App.css';\n\nfunction App() {\n\n  const [jobs, setJobs] = useState([]);\n\n  const cors_anywhere = \"https://cors-anywhere.herokuapp.com\";\n  const api_origin = \"https://jobs.github.com/positions.json\";\n  const find_location = \"usa\";\n  \n  const getjobs = async (input_value) => {\n    const api_url = `${cors_anywhere}/${api_origin}?description=${input_value}&location=${find_location}`;\n    console.log(\"fetch api starts\");\n    const response = await fetch(api_url);\n    const api_data = await response.json();\n    console.log(api_data);\n    console.log(\"fetch api ends\");\n    setJobs(api_data);\n  }\n\n  const update_search = e => {\n    e.preventDefault();\n    var search_value = document.querySelector('#search_input').value;\n    console.log(search_value);\n    getjobs(search_value);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"container\">\n      <form onSubmit={update_search}>\n        <input id=\"search_input\" type=\"text\" />\n        <button type=\"submit\">submit</button>\n      </form>\n      </div>\n      <div className=\"container\">\n        <div className=\"jobs-found\">\n        <h1>No of jobs Found : {jobs.length}</h1>\n        </div>\n      <div className=\"jobs-list row\">\n      {\n        jobs.map(job =>(\n        <div key={job.id} className=\"col-lg-6 col-md-6\">\n          <JobsList job={job} />\n        </div>\n      ))}\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}